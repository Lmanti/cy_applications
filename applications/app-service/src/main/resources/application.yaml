server:
  port: ${SERVER_PORT:8080}
spring:
  application:
    name: "cy_applications"
  devtools:
    add-properties: false
  r2dbc:
    host: ${SPRING_R2DBC_HOST:localhost}
    port: ${SPRING_R2DBC_PORT:5432}
    database: ${SPRING_R2DBC_DATABASE:cy_applications_db}
    schema: ${SPRING_R2DBC_SCHEMA:public}
    url: ${SPRING_R2DBC_URL:r2dbc:postgresql://localhost:5432/cy_applications_db}
    username: ${SPRING_R2DBC_USERNAME:postgres}
    password: ${SPRING_R2DBC_PASSWORD:postgres}
    pool:
      initial-size: 5
      max-size: 20
      max-idle-time: "30m"
  sql:
    init:
      mode: ${SPRING_SQL_INIT_MODE:always}
      schema-locations: "classpath:schema.sql"
      data-locations: "classpath:data.sql"
  profiles:
    include: null
adapter:
  restconsumer:
    timeout: 5000
    url: ${ADAPTER_RESTCONSUMER_URL:http://localhost:8080/api/v1/usuarios/}
  sqs:
    region: ${ADAPTER_SQS_NOTIFICATIONS_REGION:us-east-1}
    queueUrl: ${ADAPTER_SQS_NOTIFICATIONS_URL:http://localhost:4566/000000000000/sample}
    endpoint: ${ADAPTER_SQS_NOTIFICATIONS_ENDPOINT:http://localhost:4566}
    accessKeyId: ${AWS_MESSAGING_ACCESS_KEY_ID}
    secretAccessKey: ${AWS_MESSAGING_SECRET_ACCESS_KEY}
management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "health,prometheus"
  endpoint:
    health:
      probes:
        enabled: true
resilience4j:
  circuitbreaker:
    instances:
      testGet:
        registerHealthIndicator: true
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: "2s"
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        minimumNumberOfCalls: 10
        waitDurationInOpenState: "10s"
      testPost:
        registerHealthIndicator: true
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: "2s"
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        minimumNumberOfCalls: 10
        waitDurationInOpenState: "10s"
cors:
  allowed-origins: ${CORS_ALLOWED-ORIGINS:http://localhost:4200,http://localhost:8080}
springdoc:
  api-docs:
    path: "/api-docs"
  swagger-ui:
    path: "/swagger-ui.html"
    operationsSorter: "method"
    tagsSorter: "alpha"
    docExpansion: "none"
  packages-to-scan: "co.com.crediya.api"
  webjars:
    prefix: "/webjars"
